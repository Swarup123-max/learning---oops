Definition:
Abstraction is the process of hiding implementation details and showing only the essential features of an object.

It helps reduce complexity and increases code maintainability.

Achieved Through:

Abstract Classes: Declared using the abstract keyword.

Interfaces: All methods are abstract by default (until Java 8).

Abstract Class:

Can have both abstract methods (without implementation) and concrete methods (with implementation).

Cannot be instantiated directly.

It is used as a blueprint for other classes.

Abstract Methods:

Declared using the abstract keyword.

Must be implemented by subclasses of the abstract class.

Concrete Subclass:

A subclass that extends an abstract class and provides implementation for all its abstract methods.

Partial Abstraction:

Abstract classes provide partial abstraction as they can have both abstract and non-abstract methods.

Full Abstraction:

Interfaces provide full abstraction as all methods (until Java 8) are abstract by default.

Constructors in Abstract Class:

Abstract classes can have constructors, which are called when a subclass object is created.

Use Case:

Abstraction is used when we want to define the behavior but leave the implementation to subclasses.

Example Use:

Used in scenarios where different implementations share common behavior, but the specific details differ across classes.